#!/usr/bin/env bash

#
# Usage: Add it to your PATH and `git-remove-submodule path/to/submodule`.
#
# Does the inverse of `git submodule add`:
#  1) `deinit` the submodule
#  2) Remove the submodule from the index and working directory
#  3) Clean up the .gitmodules file
#
# History
# 
# 2013-08-21 = Adam Sharp 
#       - Initial version
# 2013-09-14 = Michael Welter 
#       - Made more portable
#       - Added show_usage
#       - Added submodule name argument check
#       - Added check for Git < 1.8.2 and equivalent functions as git submodule
#

show_usage()
{
    echo
    echo "Removes specified git submodule"
    echo
    echo "USAGE: $0 path/to/submodule"
    echo
    echo "Does the inverse of 'git submodule add':"
    echo "  1) 'deinit' the submodule"
    echo "  2) Remove the submodule from the index and working directory"
    echo "  3) Clean up the .gitmodules file"
    echo

    [ ! -z "$1" ] && exit $1
}

exit_err()
{
    [ $# -gt 0 ] && echo "ERROR: $*" 1>&2
    exit 1
}

stage_gitmodules()
{
    if [ -z "$(cat .gitmodules)" ]; then
        git rm -f .gitmodules
    else
        git add .gitmodules
    fi    
}

is_legacy_git()
{        
    local VER
    local MIN_VER

    IFS='.' read -ra MIN_VER <<< "1.8.3.0"
    IFS='.' read -ra VER <<< "$(git version | sed 's/git version //g')"

    for ((i = 0; i < 4; ++i));
    do
        [[ ${MIN_VER[i]} -gt ${VER[i]} ]] && return 0
        [[ ${MIN_VER[i]} -lt ${VER[i]} ]] && return 1
    done

    return 1
}

if [ -z "$1" ]; then
    show_usage
    exit_err "Submodule not specified"
fi;

if [ "$1" == "--help" ]; then
    show_usage 64
fi;

submodule_name=${@%/}

if ! git submodule status "$submodule_name" > /dev/null 2>&1; then
    exit_err "Submodule '$submodule_name' not found"
fi

# pre git submodule deinit
if is_legacy_git; then
    git config -f .git/config --remove-section "submodule.$submodule_name"
    git config -f .gitmodules --remove-section "submodule.$submodule_name"
    git rm -f --cached "$submodule_name"
    stage_gitmodules
    rm -rf ".git/modules/$submodule_name"
else
    git submodule deinit -f "$submodule_name"
    git rm -f "$submodule_name"
    git config -f .gitmodules --remove-section "submodule.$submodule_name"
    stage_gitmodules
fi